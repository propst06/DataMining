#This was done in Kaggle, not Colab. Therefore, if you want the code to run output it needs to be ran in Kaggle. I can attach you as a collaborator on my Kaggle notebook if you would like so that you can see my full code and output. I have also attached with this submission my score on the leaderboard.
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c69ffd1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:40.314318Z",
     "iopub.status.busy": "2021-08-09T00:38:40.313628Z",
     "iopub.status.idle": "2021-08-09T00:38:41.175375Z",
     "shell.execute_reply": "2021-08-09T00:38:41.174722Z",
     "shell.execute_reply.started": "2021-08-09T00:36:23.605395Z"
    },
    "papermill": {
     "duration": 0.893363,
     "end_time": "2021-08-09T00:38:41.175573",
     "exception": false,
     "start_time": "2021-08-09T00:38:40.282210",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Analysis necessities\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random as rnd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4b6e21a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:41.226396Z",
     "iopub.status.busy": "2021-08-09T00:38:41.225839Z",
     "iopub.status.idle": "2021-08-09T00:38:41.271741Z",
     "shell.execute_reply": "2021-08-09T00:38:41.272165Z",
     "shell.execute_reply.started": "2021-08-09T00:36:23.612227Z"
    },
    "papermill": {
     "duration": 0.072557,
     "end_time": "2021-08-09T00:38:41.272320",
     "exception": false,
     "start_time": "2021-08-09T00:38:41.199763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Load data and preview\n",
    "train = pd.read_csv(\"../input/titanic/train.csv\")\n",
    "test = pd.read_csv(\"../input/titanic/test.csv\")\n",
    "\n",
    "train.head()\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b51f28dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:41.335787Z",
     "iopub.status.busy": "2021-08-09T00:38:41.335183Z",
     "iopub.status.idle": "2021-08-09T00:38:41.340288Z",
     "shell.execute_reply": "2021-08-09T00:38:41.340908Z",
     "shell.execute_reply.started": "2021-08-09T00:36:23.665097Z"
    },
    "papermill": {
     "duration": 0.046731,
     "end_time": "2021-08-09T00:38:41.341129",
     "exception": false,
     "start_time": "2021-08-09T00:38:41.294398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "#Show more insight into the dataframe\n",
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8f88080d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:41.392963Z",
     "iopub.status.busy": "2021-08-09T00:38:41.392105Z",
     "iopub.status.idle": "2021-08-09T00:38:41.396733Z",
     "shell.execute_reply": "2021-08-09T00:38:41.395903Z",
     "shell.execute_reply.started": "2021-08-09T00:36:23.689486Z"
    },
    "papermill": {
     "duration": 0.033284,
     "end_time": "2021-08-09T00:38:41.396908",
     "exception": false,
     "start_time": "2021-08-09T00:38:41.363624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Show shape\n",
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cd9b72e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:41.455797Z",
     "iopub.status.busy": "2021-08-09T00:38:41.454935Z",
     "iopub.status.idle": "2021-08-09T00:38:41.485811Z",
     "shell.execute_reply": "2021-08-09T00:38:41.486219Z",
     "shell.execute_reply.started": "2021-08-09T00:36:23.704946Z"
    },
    "papermill": {
     "duration": 0.058827,
     "end_time": "2021-08-09T00:38:41.486389",
     "exception": false,
     "start_time": "2021-08-09T00:38:41.427562",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Look at informatoin relating to each variable. \n",
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dd3d4c19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:41.538954Z",
     "iopub.status.busy": "2021-08-09T00:38:41.538288Z",
     "iopub.status.idle": "2021-08-09T00:38:41.572903Z",
     "shell.execute_reply": "2021-08-09T00:38:41.573405Z",
     "shell.execute_reply.started": "2021-08-09T00:36:23.754595Z"
    },
    "papermill": {
     "duration": 0.063106,
     "end_time": "2021-08-09T00:38:41.573596",
     "exception": false,
     "start_time": "2021-08-09T00:38:41.510490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Sandstrom, Miss. Marguerite Rut</td>\n",
       "      <td>female</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>PP 9549</td>\n",
       "      <td>16.7000</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Bonnell, Miss. Elizabeth</td>\n",
       "      <td>female</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113783</td>\n",
       "      <td>26.5500</td>\n",
       "      <td>C103</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>872</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Beckwith, Mrs. Richard Leonard (Sallie Monypeny)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11751</td>\n",
       "      <td>52.5542</td>\n",
       "      <td>D35</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>873</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Carlsson, Mr. Frans Olof</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>695</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>880</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)</td>\n",
       "      <td>female</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11767</td>\n",
       "      <td>83.1583</td>\n",
       "      <td>C50</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>183 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "1              2         1       1   \n",
       "3              4         1       1   \n",
       "6              7         0       1   \n",
       "10            11         1       3   \n",
       "11            12         1       1   \n",
       "..           ...       ...     ...   \n",
       "871          872         1       1   \n",
       "872          873         0       1   \n",
       "879          880         1       1   \n",
       "887          888         1       1   \n",
       "889          890         1       1   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "6                              McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "10                     Sandstrom, Miss. Marguerite Rut  female   4.0      1   \n",
       "11                            Bonnell, Miss. Elizabeth  female  58.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "871   Beckwith, Mrs. Richard Leonard (Sallie Monypeny)  female  47.0      1   \n",
       "872                           Carlsson, Mr. Frans Olof    male  33.0      0   \n",
       "879      Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)  female  56.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "\n",
       "     Parch    Ticket     Fare        Cabin Embarked  \n",
       "1        0  PC 17599  71.2833          C85        C  \n",
       "3        0    113803  53.1000         C123        S  \n",
       "6        0     17463  51.8625          E46        S  \n",
       "10       1   PP 9549  16.7000           G6        S  \n",
       "11       0    113783  26.5500         C103        S  \n",
       "..     ...       ...      ...          ...      ...  \n",
       "871      1     11751  52.5542          D35        S  \n",
       "872      0       695   5.0000  B51 B53 B55        S  \n",
       "879      1     11767  83.1583          C50        C  \n",
       "887      0    112053  30.0000          B42        S  \n",
       "889      0    111369  30.0000         C148        C  \n",
       "\n",
       "[183 rows x 12 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Remove nulls from the training data set. \n",
    "train.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d41bdb19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:41.622638Z",
     "iopub.status.busy": "2021-08-09T00:38:41.622054Z",
     "iopub.status.idle": "2021-08-09T00:38:41.628793Z",
     "shell.execute_reply": "2021-08-09T00:38:41.629304Z",
     "shell.execute_reply.started": "2021-08-09T00:36:23.798561Z"
    },
    "papermill": {
     "duration": 0.032611,
     "end_time": "2021-08-09T00:38:41.629481",
     "exception": false,
     "start_time": "2021-08-09T00:38:41.596870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check to see how many nulls were removed/remain.\n",
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9280b4fd",
   "metadata": {
    "papermill": {
     "duration": 0.023391,
     "end_time": "2021-08-09T00:38:41.676388",
     "exception": false,
     "start_time": "2021-08-09T00:38:41.652997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f5a30f44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:41.726259Z",
     "iopub.status.busy": "2021-08-09T00:38:41.725709Z",
     "iopub.status.idle": "2021-08-09T00:38:42.179712Z",
     "shell.execute_reply": "2021-08-09T00:38:42.180394Z",
     "shell.execute_reply.started": "2021-08-09T00:36:23.813546Z"
    },
    "papermill": {
     "duration": 0.480625,
     "end_time": "2021-08-09T00:38:42.180644",
     "exception": false,
     "start_time": "2021-08-09T00:38:41.700019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Use a correlation map to see which numeric variables have a high correlation. \n",
    "v = sns.heatmap(train[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\", \"Pclass\"]].corr(),annot=True, fmt = \".2f\", cmap = \"PiYG\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "92fb1244",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:42.244235Z",
     "iopub.status.busy": "2021-08-09T00:38:42.243702Z",
     "iopub.status.idle": "2021-08-09T00:38:42.255358Z",
     "shell.execute_reply": "2021-08-09T00:38:42.255815Z",
     "shell.execute_reply.started": "2021-08-09T00:36:24.394625Z"
    },
    "papermill": {
     "duration": 0.043007,
     "end_time": "2021-08-09T00:38:42.255967",
     "exception": false,
     "start_time": "2021-08-09T00:38:42.212960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.629630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.472826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.242363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Survived\n",
       "Pclass          \n",
       "1       0.629630\n",
       "2       0.472826\n",
       "3       0.242363"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Based off of the heatmap, I have selected a few variables that have the highest correlation. Here I have grouped them and shown the mean and median values.\n",
    "#Pclass had the highest correlation with Survived. It is shown here that Pclass 1 had the highest chance of surviving the Titanic crash. \n",
    "train[['Pclass', 'Survived']].groupby(['Pclass']).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "56aac3d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:42.309477Z",
     "iopub.status.busy": "2021-08-09T00:38:42.308562Z",
     "iopub.status.idle": "2021-08-09T00:38:42.320473Z",
     "shell.execute_reply": "2021-08-09T00:38:42.320924Z",
     "shell.execute_reply.started": "2021-08-09T00:36:24.418190Z"
    },
    "papermill": {
     "duration": 0.040033,
     "end_time": "2021-08-09T00:38:42.321082",
     "exception": false,
     "start_time": "2021-08-09T00:38:42.281049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Survived\n",
       "Pclass          \n",
       "1              1\n",
       "2              0\n",
       "3              0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#I chose to show the median to further drive home the point that Pclass 1 had the highest chance of survival, as the median for 2 and 3 is 0. \n",
    "train[['Pclass', 'Survived']].groupby(['Pclass']).median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "15d16006",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:42.375583Z",
     "iopub.status.busy": "2021-08-09T00:38:42.374689Z",
     "iopub.status.idle": "2021-08-09T00:38:42.386395Z",
     "shell.execute_reply": "2021-08-09T00:38:42.386880Z",
     "shell.execute_reply.started": "2021-08-09T00:36:24.440373Z"
    },
    "papermill": {
     "duration": 0.040413,
     "end_time": "2021-08-09T00:38:42.387048",
     "exception": false,
     "start_time": "2021-08-09T00:38:42.346635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38.233441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.877630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25.140620</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Age\n",
       "Pclass           \n",
       "1       38.233441\n",
       "2       29.877630\n",
       "3       25.140620"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#I have chosen to show this because Age had a high correlation to Pclass and I wanted to see if it was meaningful. The mean age for the highest class (1) is nearly ten years older than the lower classes.\n",
    "train[['Pclass', 'Age']].groupby(['Pclass']).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "59f2a5fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:42.441889Z",
     "iopub.status.busy": "2021-08-09T00:38:42.441009Z",
     "iopub.status.idle": "2021-08-09T00:38:42.451492Z",
     "shell.execute_reply": "2021-08-09T00:38:42.451915Z",
     "shell.execute_reply.started": "2021-08-09T00:36:24.456540Z"
    },
    "papermill": {
     "duration": 0.03902,
     "end_time": "2021-08-09T00:38:42.452079",
     "exception": false,
     "start_time": "2021-08-09T00:38:42.413059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Age\n",
       "Pclass      \n",
       "1       37.0\n",
       "2       29.0\n",
       "3       24.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#I ran the median to see if there was a signficant change from the mean, there is not. \n",
    "train[['Pclass', 'Age']].groupby(['Pclass']).median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4de2ba6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:42.507758Z",
     "iopub.status.busy": "2021-08-09T00:38:42.506891Z",
     "iopub.status.idle": "2021-08-09T00:38:42.517991Z",
     "shell.execute_reply": "2021-08-09T00:38:42.517563Z",
     "shell.execute_reply.started": "2021-08-09T00:36:24.488444Z"
    },
    "papermill": {
     "duration": 0.039766,
     "end_time": "2021-08-09T00:38:42.518121",
     "exception": false,
     "start_time": "2021-08-09T00:38:42.478355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22.117887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48.395408</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Fare\n",
       "Survived           \n",
       "0         22.117887\n",
       "1         48.395408"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fare had the second highest correlation to Survived, which makes sense because the higher the Pclass the more the fare would be. Here I have shown the average fare based of Survived.\n",
    "train[['Fare', 'Survived']].groupby(['Survived']).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dfc96b2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:42.581686Z",
     "iopub.status.busy": "2021-08-09T00:38:42.581097Z",
     "iopub.status.idle": "2021-08-09T00:38:42.583693Z",
     "shell.execute_reply": "2021-08-09T00:38:42.584183Z",
     "shell.execute_reply.started": "2021-08-09T00:36:24.509830Z"
    },
    "papermill": {
     "duration": 0.039301,
     "end_time": "2021-08-09T00:38:42.584335",
     "exception": false,
     "start_time": "2021-08-09T00:38:42.545034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Fare\n",
       "Survived      \n",
       "0         10.5\n",
       "1         26.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#The prior showed that the lower fares were least likely to survive, which is backed up by the lower Pclasses also being the least likely to survive. I simply wanted to see the median values for the fares.\n",
    "train[['Fare', 'Survived']].groupby(['Survived']).median()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa1ec12e",
   "metadata": {
    "papermill": {
     "duration": 0.026254,
     "end_time": "2021-08-09T00:38:42.637363",
     "exception": false,
     "start_time": "2021-08-09T00:38:42.611109",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "887b4ca1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:42.693352Z",
     "iopub.status.busy": "2021-08-09T00:38:42.692803Z",
     "iopub.status.idle": "2021-08-09T00:38:43.030883Z",
     "shell.execute_reply": "2021-08-09T00:38:43.031367Z",
     "shell.execute_reply.started": "2021-08-09T00:36:24.536715Z"
    },
    "papermill": {
     "duration": 0.3677,
     "end_time": "2021-08-09T00:38:43.031549",
     "exception": false,
     "start_time": "2021-08-09T00:38:42.663849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f14f057f850>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Based off of the prior information gained, I wanted to see histograms of Pclass, Age, and Fare.\n",
    "g = sns.FacetGrid(train, col='Survived')\n",
    "g.map(plt.hist, 'Pclass', bins=3)\n",
    "#Here it's shown that if you were in Pclass 3 you were more likely to not survive and most of the passengers were in Pclass3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6cddd521",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:43.088999Z",
     "iopub.status.busy": "2021-08-09T00:38:43.088420Z",
     "iopub.status.idle": "2021-08-09T00:38:43.474090Z",
     "shell.execute_reply": "2021-08-09T00:38:43.473338Z",
     "shell.execute_reply.started": "2021-08-09T00:36:25.005332Z"
    },
    "papermill": {
     "duration": 0.415466,
     "end_time": "2021-08-09T00:38:43.474290",
     "exception": false,
     "start_time": "2021-08-09T00:38:43.058824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f14f05792d0>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAADQCAYAAABStPXYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAARW0lEQVR4nO3df+xddX3H8edLKjJhA4pNVwsZ3SQQ1InQKYg6Ji5DJUJmZRDmqmEhS1DxV7TMP9TsRyQxKvuBWSNqx4wWKhsNGhlW2NTMzqIIAiqdgrQr8kUFh1vUynt/nFP5Wr+l5Xvvt/dz730+kpt7z4977vt76JvXPefe+zmpKiRJas0TRl2AJElzMaAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgRiTJ25PcnuTWJLckee6QtvvyJGuGtK2Hh7CNJyVZn2Rrks1Jjh5CaZpwU9QfL0zy5SQ7k6waRl2TZNGoC5hGSU4BzgROrKofJ3kKcODjeP6iqto517Kq2ghsHE6lQ3EB8IOqelqSc4FLgT8acU1q2JT1x3eAVwNvGXEdTfIIajSWAQ9U1Y8BquqBqvpvgCR39w1JkpVJbuofvzPJlUm+AFyZ5ItJnr5rg0lu6td/dZK/S3JoknuSPKFffnCSe5M8MclvJfl0kpuTfC7Jcf06K5L8R5LbkvzlkP7Ws4B1/eMNwOlJMqRtazJNTX9U1d1VdSvwyDC2N2kMqNH4V+CoJN9McnmS393H5x0PvLiqzgPWA+cAJFkGLKuqLbtWrKqHgFuAXds+E7i+qn4KrAVeV1Un0b1zu7xf5zLgA1X1TGDHnorom/aWOW4vnmP15cC9fU07gYeAI/bx79V0mqb+0GPwFN8IVNXDSU4CXgD8HrA+yZqq+shenrqxqv6vf3wVXSO/g64RN8yx/nq602k3AucClyc5BHgecPWsA5kn9fenAq/oH19JdzpurvpfsJc6pXmzP7SLATUiVfUz4CbgpiS3AauBjwA7efTI9qDdnvajWc/fnuR7SX6brsn+bI6X2Qj8dZLFwEnAZ4GDgQer6oQ9lba32pN8DvjVORa9pao+s9u87cBRwLYki4BDge/t7TU03aaoP/QYPMU3AkmOTXLMrFknAPf0j++maxZ49N3anqwH3goc2p/H/gVV9TDwJbpTE9dV1c+q6ofAt5O8sq8lSZ7VP+ULdO8kAc7f04tW1Quq6oQ5bnM130a6/7kArAI+W45QrMcwZf2hx2BAjcYhwLokdyS5le7c+Tv7Ze8CLkuyBfjZXrazga5hrnqMddYDf9zf73I+cEGSrwK3032RAeBi4KL+Hevyff9zHtMVwBFJtgJvAobyFV9NtKnpjyS/k2Qb8ErgH5LcPoztTor4ZlaS1CKPoCRJTTKgJElNMqAkSU0yoCRJTWoioM4444yi+32BN2+TepsXe8PblNzm1ERAPfDAA6MuQWqSvaFp1kRASZK0OwNKktQkA0qS1CQDSpLUJANKktQkA0qS1CSvB7UfHL3mk/N+7t3vftkQK5Gk8eERlCSpSQaUJKlJBpQkqUkGlCSpSQaUJKlJBpQkqUkGlCSpSQaUJKlJew2oJB9Kcn+Sr82atzjJDUnu6u8P7+cnyd8k2Zrk1iQnLmTxkqTJtS9HUB8Bztht3hpgU1UdA2zqpwFeAhzT3y4EPjCcMiVJ02avAVVV/w58f7fZZwHr+sfrgLNnzf/H6nwROCzJsiHVKkmaIvP9DGppVe3oH98HLO0fLwfunbXetn7eL0lyYZItSbbMzMzMswxp8tgbUmfgL0lUVQE1j+etraqVVbVyyZIlg5YhTQx7Q+rMdzTz7yZZVlU7+lN49/fztwNHzVrvyH7e2BtkRHJJ0uM33yOojcDq/vFq4NpZ8/+k/zbfycBDs04FSpK0z/Z6BJXkY8BpwFOSbAPeAbwbuCrJBcA9wDn96p8CXgpsBf4XeM0C1CxJmgJ7DaiqOm8Pi06fY90CLhq0KEmSHElCktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1KSBAirJG5PcnuRrST6W5KAkK5JsTrI1yfokBw6rWEnS9Jh3QCVZDrweWFlVzwAOAM4FLgXeV1VPA34AXDCMQiVJ02XQU3yLgF9Jsgh4MrADeBGwoV++Djh7wNeQJE2heQdUVW0H3gN8hy6YHgJuBh6sqp39atuA5XM9P8mFSbYk2TIzMzPfMqSJY29InUFO8R0OnAWsAJ4KHAycsa/Pr6q1VbWyqlYuWbJkvmVIE8fekDqDnOJ7MfDtqpqpqp8C1wCnAof1p/wAjgS2D1ijJGkKDRJQ3wFOTvLkJAFOB+4AbgRW9eusBq4drERJ0jQa5DOozXRfhvgycFu/rbXA24A3JdkKHAFcMYQ6JUlTZtHeV9mzqnoH8I7dZn8LeM4g25UkyZEkJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0a6HIbkjQsR6/55MDbuPvdLxtCJWqFAdW4QZvWhpU0rgwoSUMxjCMgabaBPoNKcliSDUm+nuTOJKckWZzkhiR39feHD6tYSdL0GPRLEpcBn66q44BnAXcCa4BNVXUMsKmfliTpcZl3QCU5FHghcAVAVf2kqh4EzgLW9autA84erERJ0jQa5AhqBTADfDjJV5J8MMnBwNKq2tGvcx+wdK4nJ7kwyZYkW2ZmZgYoQ5os9obUGSSgFgEnAh+oqmcDP2K303lVVUDN9eSqWltVK6tq5ZIlSwYoQ5os9obUGSSgtgHbqmpzP72BLrC+m2QZQH9//2AlSpKm0bwDqqruA+5Ncmw/63TgDmAjsLqftxq4dqAKJUlTadDfQb0O+GiSA4FvAa+hC72rklwA3AOcM+BrSJKm0EABVVW3ACvnWHT6INuVJMnBYiVJTTKgJElNMqAkSU0yoCRJTTKgJElN8nIbkiaGFz2cLB5BSZKaZEBJkppkQEmSmmRASZKaZEBJkppkQEmSmmRASZKaZEBJkprkD3Un3CA/XPQHi5JGySMoSVKTDChJUpMGDqgkByT5SpLr+ukVSTYn2ZpkfX85eEmSHpdhHEFdDNw5a/pS4H1V9TTgB8AFQ3gNSdKUGSigkhwJvAz4YD8d4EXAhn6VdcDZg7yGJGk6DXoE9X7grcAj/fQRwINVtbOf3gYsn+uJSS5MsiXJlpmZmQHLkCaHvSF15h1QSc4E7q+qm+fz/KpaW1Urq2rlkiVL5luGNHHsDakzyO+gTgVenuSlwEHArwGXAYclWdQfRR0JbB+8TEnStJl3QFXVJcAlAElOA95SVecnuRpYBXwcWA1cO3iZGoVBr07qD30lDWIhfgf1NuBNSbbSfSZ1xQK8hiRpwg1lqKOqugm4qX/8LeA5w9iupL0b9EgXPNpVmxxJQpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1KShXA9KkiaF19dqh0dQkqQmzTugkhyV5MYkdyS5PcnF/fzFSW5Icld/f/jwypUkTYtBjqB2Am+uquOBk4GLkhwPrAE2VdUxwKZ+WpKkx2Xen0FV1Q5gR//4f5LcCSwHzgJO61dbB9wEvG2gKiVpjPg51nAM5TOoJEcDzwY2A0v78AK4D1i6h+dcmGRLki0zMzPDKEOaCPaG1Bn4W3xJDgE+Abyhqn6Y5OfLqqqS1FzPq6q1wFqAlStXzrmONI1G0RvDeMcvDdtAR1BJnkgXTh+tqmv62d9Nsqxfvgy4f7ASJUnTaN5HUOkOla4A7qyq985atBFYDby7v792oApnGeRdnudzJWm8DHKK71TgVcBtSW7p5/05XTBdleQC4B7gnIEqlCRNpUG+xfd5IHtYfPp8t7tQPMcuSePFoY60YDwlK2kQDnUkSWqSASVJapKn+NSkQT8z9BShNP48gpIkNcmAkiQ1yYCSJDXJgJIkNckvSUhSg7xkh0dQkqRGGVCSpCYZUJKkJvkZlCaS4wBK488jKElSkwwoSVKTDChJUpMMKElSkxYkoJKckeQbSbYmWbMQryFJmmxDD6gkBwB/D7wEOB44L8nxw34dSdJkW4ivmT8H2FpV3wJI8nHgLOCOBXgtSdICGfVwS6mqgQv4hQ0mq4AzqupP++lXAc+tqtfutt6FwIX95LHANx5js08BHhhqoQvDOodrXOqEvdf6QFWdsS8bsjdGblxqnaQ65+yPkf1Qt6rWAmv3Zd0kW6pq5QKXNDDrHK5xqROGW6u9MVrjUus01LkQX5LYDhw1a/rIfp4kSftsIQLqS8AxSVYkORA4F9i4AK8jSZpgQz/FV1U7k7wWuB44APhQVd0+4Gb36XRHA6xzuMalThhdreOyj8alThifWie+zqF/SUKSpGFwJAlJUpMMKElSk5oOqFaHTEpyVJIbk9yR5PYkF/fzFye5Icld/f3ho64VutE9knwlyXX99Iokm/v9ur7/MsvIJTksyYYkX09yZ5JTWtynSd7Y/3f/WpKPJTloFPvU/hiOceiPcekNGG5/NBtQjQ+ZtBN4c1UdD5wMXNTXtgbYVFXHAJv66RZcDNw5a/pS4H1V9TTgB8AFI6nql10GfLqqjgOeRVdzU/s0yXLg9cDKqnoG3ReBzmU/71P7Y6jGoT+a7w1YgP6oqiZvwCnA9bOmLwEuGXVde6j1WuD36X7xv6yftwz4RgO1HUn3j/dFwHVA6H7VvWiu/TzCOg8Fvk3/xZ1Z85vap8By4F5gMd23YK8D/mB/71P7Y2i1Nd8f49IbfR1D7Y9mj6B49A/dZVs/rylJjgaeDWwGllbVjn7RfcDSUdU1y/uBtwKP9NNHAA9W1c5+upX9ugKYAT7cn275YJKDaWyfVtV24D3Ad4AdwEPAzez/fWp/DMf7ab8/xqI3YPj90XJANS/JIcAngDdU1Q9nL6vurcJIv8Of5Ezg/qq6eZR17KNFwInAB6rq2cCP2O2URSP79HC6wY9XAE8FDgb2aYy9aWN/DM1Y9AYMvz9aDqimh0xK8kS65vtoVV3Tz/5ukmX98mXA/aOqr3cq8PIkdwMfpzuNcRlwWJJdP9JuZb9uA7ZV1eZ+egNdU7a2T18MfLuqZqrqp8A1dPt5f+9T+2Nw49If49IbMOT+aDmgmh0yKUmAK4A7q+q9sxZtBFb3j1fTnXsfmaq6pKqOrKqj6fbfZ6vqfOBGYFW/2sjrBKiq+4B7kxzbzzqd7hItTe1TulMXJyd5cv/vYFed+3uf2h8DGpf+GKPegGH3x6g/VNvLB24vBb4J/Bfw9lHXM6uu59MdTt8K3NLfXkp3/noTcBfwGWDxqGudVfNpwHX9498E/hPYClwNPGnU9fV1nQBs6ffrvwCHt7hPgXcBXwe+BlwJPGkU+9T+GGrNTffHuPRGX+vQ+sOhjiRJTWr5FJ8kaYoZUJKkJhlQkqQmGVCSpCYZUJKkJhlQEyrJ2UkqyXGjrkVqib0xPgyoyXUe8Pn+XtKj7I0xYUBNoH4MtOfTDWl/bj/vCUku768nc0OSTyVZ1S87Kcm/Jbk5yfW7hk+RJo29MV4MqMl0Ft21Y74JfC/JScAfAkfTXTvoVXRD3u8aM+1vgVVVdRLwIeCvRlG0tB/YG2Nk0d5X0Rg6j27QS+gGwTyP7r/11VX1CHBfkhv75ccCzwBu6IbO4gC6YfKlSWRvjBEDasIkWUw3KvMzkxRdUxXwz3t6CnB7VZ2yn0qURsLeGD+e4ps8q4Arq+o3quroqjqK7mqc3wde0Z9vX0o3OCZ0V+VckuTnpzWSPH0UhUsLzN4YMwbU5DmPX35H+Ang1+muK3MH8E/Al4GHquondI17aZKv0o08/bz9Vq20/9gbY8bRzKdIkkOq6uEkR9ANfX9qddeakaaavdEmP4OaLtclOQw4EPgLG1D6OXujQR5BSZKa5GdQkqQmGVCSpCYZUJKkJhlQkqQmGVCSpCb9P5OkSyV4USCcAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(train, col='Survived')\n",
    "g.map(plt.hist, 'Age', bins=10)\n",
    "#Here it's shown that most of the people who did not survive were in 20-40 age group. This graph also shows us that the people who survived were from a wide range of ages, but also mostly from the 20-40 age range.\n",
    "#This tells us that the majority of the passengers were in the 20-40 age range. This also tells us that the oldest passengers survived. Most children survived as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0003ff25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:43.557080Z",
     "iopub.status.busy": "2021-08-09T00:38:43.556049Z",
     "iopub.status.idle": "2021-08-09T00:38:44.064088Z",
     "shell.execute_reply": "2021-08-09T00:38:44.063538Z",
     "shell.execute_reply.started": "2021-08-09T00:36:25.491075Z"
    },
    "papermill": {
     "duration": 0.554511,
     "end_time": "2021-08-09T00:38:44.064214",
     "exception": false,
     "start_time": "2021-08-09T00:38:43.509703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f14f047dcd0>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#This shows us that most people who did not pay a large fare did not survive and that the majority of passengers did not pay a high fare. The passengers with the highest fares survived.\n",
    "g = sns.FacetGrid(train, col='Survived')\n",
    "g.map(plt.hist, 'Fare', bins=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f74be680",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:44.143768Z",
     "iopub.status.busy": "2021-08-09T00:38:44.127902Z",
     "iopub.status.idle": "2021-08-09T00:38:45.442908Z",
     "shell.execute_reply": "2021-08-09T00:38:45.442377Z",
     "shell.execute_reply.started": "2021-08-09T00:36:26.104243Z"
    },
    "papermill": {
     "duration": 1.349822,
     "end_time": "2021-08-09T00:38:45.443059",
     "exception": false,
     "start_time": "2021-08-09T00:38:44.093237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 722.24x669.6 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Here I wanted to show the ages that made up each Pclass as they are closely correlated and how many survived from that Pclass.\n",
    "grid = sns.FacetGrid(train, col='Survived', row='Pclass', height=3.1, aspect=1.6)\n",
    "grid.map(plt.hist, 'Age', alpha=.5, bins=10)\n",
    "grid.add_legend();\n",
    "#These grids tell us that most of the survivors from all classes were in the 30-40s age range, with the lower classes(2 and 3) having more children that survived and more children total."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d2932dee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:45.511857Z",
     "iopub.status.busy": "2021-08-09T00:38:45.510928Z",
     "iopub.status.idle": "2021-08-09T00:38:45.685080Z",
     "shell.execute_reply": "2021-08-09T00:38:45.684515Z",
     "shell.execute_reply.started": "2021-08-09T00:36:27.976969Z"
    },
    "papermill": {
     "duration": 0.211795,
     "end_time": "2021-08-09T00:38:45.685209",
     "exception": false,
     "start_time": "2021-08-09T00:38:45.473414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#As I have shown, it is clear that Pclass and Age have a clear correlation with whether or not a passenger survived. I have decided to omit fare from further investigation because it is so closely correlated to Pclass. \n",
    "#At this point, I would like to see if males or females were more likely to survive.\n",
    "g = sns.barplot(x=\"Sex\",y=\"Survived\",data=train)\n",
    "g = g.set_ylabel(\"Survival Probability\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dbcd4fb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:45.764081Z",
     "iopub.status.busy": "2021-08-09T00:38:45.751154Z",
     "iopub.status.idle": "2021-08-09T00:38:46.641686Z",
     "shell.execute_reply": "2021-08-09T00:38:46.641152Z",
     "shell.execute_reply.started": "2021-08-09T00:36:28.214593Z"
    },
    "papermill": {
     "duration": 0.926463,
     "end_time": "2021-08-09T00:38:46.641824",
     "exception": false,
     "start_time": "2021-08-09T00:38:45.715361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 722.24x446.4 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#It is clear that females were more likely to survive. Let's look at the ages.\n",
    "grid = sns.FacetGrid(train, col='Survived', row='Sex', height=3.1, aspect=1.6)\n",
    "grid.map(plt.hist, 'Age', alpha=.5, bins=10)\n",
    "grid.add_legend();\n",
    "#This shows us that young men were most likely to not survive (due to being the most highly populated on the ship), but also because we know that women and children were the priority. \n",
    "#Women between the ages of 15-35 were most likely to survive, and children of both sexes were likely to survive. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8322ba40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:46.710407Z",
     "iopub.status.busy": "2021-08-09T00:38:46.709834Z",
     "iopub.status.idle": "2021-08-09T00:38:47.571036Z",
     "shell.execute_reply": "2021-08-09T00:38:47.570588Z",
     "shell.execute_reply.started": "2021-08-09T00:36:29.685847Z"
    },
    "papermill": {
     "duration": 0.898407,
     "end_time": "2021-08-09T00:38:47.571168",
     "exception": false,
     "start_time": "2021-08-09T00:38:46.672761",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 722.24x446.4 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Let's look at which Pclass each sex was in. \n",
    "grid = sns.FacetGrid(train, col='Survived', row='Sex', height=3.1, aspect=1.6)\n",
    "grid.map(plt.hist, 'Pclass', alpha=.5, bins=3)\n",
    "grid.add_legend();\n",
    "#This shows us that men of all classes did not survive, but least likely if they were in Pclass 3. Women of all classes survived, but least likely if they were in Pclass3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e658352b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:47.638560Z",
     "iopub.status.busy": "2021-08-09T00:38:47.637901Z",
     "iopub.status.idle": "2021-08-09T00:38:47.642156Z",
     "shell.execute_reply": "2021-08-09T00:38:47.641326Z",
     "shell.execute_reply.started": "2021-08-09T00:36:30.863727Z"
    },
    "papermill": {
     "duration": 0.039589,
     "end_time": "2021-08-09T00:38:47.642307",
     "exception": false,
     "start_time": "2021-08-09T00:38:47.602718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Now it is time for modeling since I now have an idea of what is likely to predict survival.\n",
    "#I have removed all variables aside from Pclass, Age, and Sex in order to see how accurate it is that these vairables would truly predict survival.\n",
    "#I realized that in order to to use the variable Age I would need to fill in the values with something that is not null. There will be a skew in the data because I am filling the nulls with the value 0 as it is likely the ages of those who survived would be younger. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "63809885",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:47.713620Z",
     "iopub.status.busy": "2021-08-09T00:38:47.713014Z",
     "iopub.status.idle": "2021-08-09T00:38:47.714767Z",
     "shell.execute_reply": "2021-08-09T00:38:47.715186Z",
     "shell.execute_reply.started": "2021-08-09T00:36:30.870558Z"
    },
    "papermill": {
     "duration": 0.040588,
     "end_time": "2021-08-09T00:38:47.715346",
     "exception": false,
     "start_time": "2021-08-09T00:38:47.674758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train[\"Age\"].fillna(\"0\", inplace = True)\n",
    "test[\"Age\"].fillna(\"0\", inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "da42158a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:47.781500Z",
     "iopub.status.busy": "2021-08-09T00:38:47.780938Z",
     "iopub.status.idle": "2021-08-09T00:38:47.788635Z",
     "shell.execute_reply": "2021-08-09T00:38:47.789015Z",
     "shell.execute_reply.started": "2021-08-09T00:36:30.888105Z"
    },
    "papermill": {
     "duration": 0.041991,
     "end_time": "2021-08-09T00:38:47.789170",
     "exception": false,
     "start_time": "2021-08-09T00:38:47.747179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Converting the column Sex to numerical so it can be used in modeling.\n",
    "train[\"Sex\"] = pd.get_dummies(train[\"Sex\"])\n",
    "test[\"Sex\"] = pd.get_dummies(test[\"Sex\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5864fdd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:47.862615Z",
     "iopub.status.busy": "2021-08-09T00:38:47.862034Z",
     "iopub.status.idle": "2021-08-09T00:38:47.864589Z",
     "shell.execute_reply": "2021-08-09T00:38:47.865006Z",
     "shell.execute_reply.started": "2021-08-09T00:36:30.910052Z"
    },
    "papermill": {
     "duration": 0.04426,
     "end_time": "2021-08-09T00:38:47.865147",
     "exception": false,
     "start_time": "2021-08-09T00:38:47.820887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((891, 3), (891,), (418, 3))"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Survived\"] = train[\"Survived\"].astype(int)\n",
    "X_train = train.drop([\"Survived\", \"Name\",\"Embarked\", \"Ticket\", \"Cabin\", \"PassengerId\", \"SibSp\", \"Parch\", \"Fare\"], axis=1)\n",
    "Y_train = train[\"Survived\"]\n",
    "X_test  = test.drop([\"PassengerId\", \"Name\", \"Embarked\", \"Ticket\", \"Cabin\", \"SibSp\", \"Parch\",\"Fare\"], axis=1).copy()\n",
    "X_train.shape, Y_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "db0741fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:47.931141Z",
     "iopub.status.busy": "2021-08-09T00:38:47.930617Z",
     "iopub.status.idle": "2021-08-09T00:38:48.268241Z",
     "shell.execute_reply": "2021-08-09T00:38:48.267780Z",
     "shell.execute_reply.started": "2021-08-09T00:36:30.936124Z"
    },
    "papermill": {
     "duration": 0.37165,
     "end_time": "2021-08-09T00:38:48.268375",
     "exception": false,
     "start_time": "2021-08-09T00:38:47.896725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b384b90d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:48.335784Z",
     "iopub.status.busy": "2021-08-09T00:38:48.335183Z",
     "iopub.status.idle": "2021-08-09T00:38:48.350455Z",
     "shell.execute_reply": "2021-08-09T00:38:48.349904Z",
     "shell.execute_reply.started": "2021-08-09T00:36:30.958162Z"
    },
    "papermill": {
     "duration": 0.050086,
     "end_time": "2021-08-09T00:38:48.350595",
     "exception": false,
     "start_time": "2021-08-09T00:38:48.300509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "87.99"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree = DecisionTreeClassifier()\n",
    "decision_tree.fit(X_train, Y_train)\n",
    "Y_pred = decision_tree.predict(X_test)\n",
    "accuracy_dtree = round(decision_tree.score(X_train, Y_train) * 100, 2)\n",
    "accuracy_dtree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7b60840b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:48.423573Z",
     "iopub.status.busy": "2021-08-09T00:38:48.422193Z",
     "iopub.status.idle": "2021-08-09T00:38:48.600379Z",
     "shell.execute_reply": "2021-08-09T00:38:48.599863Z",
     "shell.execute_reply.started": "2021-08-09T00:36:30.998429Z"
    },
    "papermill": {
     "duration": 0.217899,
     "end_time": "2021-08-09T00:38:48.600537",
     "exception": false,
     "start_time": "2021-08-09T00:38:48.382638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "85.75"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn = KNeighborsClassifier(n_neighbors = 3)\n",
    "knn.fit(X_train, Y_train)\n",
    "Y_pred = knn.predict(X_test)\n",
    "accuracy_knn = round(knn.score(X_train, Y_train) * 100, 2)\n",
    "accuracy_knn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0bb3761f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:48.673254Z",
     "iopub.status.busy": "2021-08-09T00:38:48.672589Z",
     "iopub.status.idle": "2021-08-09T00:38:48.817343Z",
     "shell.execute_reply": "2021-08-09T00:38:48.817813Z",
     "shell.execute_reply.started": "2021-08-09T00:36:31.088692Z"
    },
    "papermill": {
     "duration": 0.183485,
     "end_time": "2021-08-09T00:38:48.817975",
     "exception": false,
     "start_time": "2021-08-09T00:38:48.634490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "78.34"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg = LogisticRegression()\n",
    "logreg.fit(X_train, Y_train)\n",
    "Y_pred = logreg.predict(X_test)\n",
    "accuracy_log = round(logreg.score(X_train, Y_train) * 100, 2)\n",
    "accuracy_log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a3a26d97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:48.888924Z",
     "iopub.status.busy": "2021-08-09T00:38:48.888338Z",
     "iopub.status.idle": "2021-08-09T00:38:48.947690Z",
     "shell.execute_reply": "2021-08-09T00:38:48.947140Z",
     "shell.execute_reply.started": "2021-08-09T00:36:31.119096Z"
    },
    "papermill": {
     "duration": 0.097542,
     "end_time": "2021-08-09T00:38:48.947827",
     "exception": false,
     "start_time": "2021-08-09T00:38:48.850285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61.62"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc = SVC()\n",
    "svc.fit(X_train, Y_train)\n",
    "Y_pred = svc.predict(X_test)\n",
    "accuracy_svc = round(svc.score(X_train, Y_train) * 100, 2)\n",
    "accuracy_svc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "812c319e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:49.020462Z",
     "iopub.status.busy": "2021-08-09T00:38:49.019869Z",
     "iopub.status.idle": "2021-08-09T00:38:49.247448Z",
     "shell.execute_reply": "2021-08-09T00:38:49.247870Z",
     "shell.execute_reply.started": "2021-08-09T00:36:31.201639Z"
    },
    "papermill": {
     "duration": 0.267488,
     "end_time": "2021-08-09T00:38:49.248038",
     "exception": false,
     "start_time": "2021-08-09T00:38:48.980550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "87.99"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest = RandomForestClassifier(n_estimators=100)\n",
    "random_forest.fit(X_train, Y_train)\n",
    "Y_pred = random_forest.predict(X_test)\n",
    "random_forest.score(X_train, Y_train)\n",
    "accuracy_rf = round(random_forest.score(X_train, Y_train) * 100, 2)\n",
    "accuracy_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "283d25c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:49.322163Z",
     "iopub.status.busy": "2021-08-09T00:38:49.321581Z",
     "iopub.status.idle": "2021-08-09T00:38:49.333176Z",
     "shell.execute_reply": "2021-08-09T00:38:49.332592Z",
     "shell.execute_reply.started": "2021-08-09T00:36:31.542357Z"
    },
    "papermill": {
     "duration": 0.052168,
     "end_time": "2021-08-09T00:38:49.333310",
     "exception": false,
     "start_time": "2021-08-09T00:38:49.281142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55.67"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Perceptron\n",
    "perceptron = Perceptron()\n",
    "perceptron.fit(X_train, Y_train)\n",
    "Y_pred = perceptron.predict(X_test)\n",
    "accuracy_per = round(perceptron.score(X_train, Y_train) * 100, 2)\n",
    "accuracy_per"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e799bfd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:49.402458Z",
     "iopub.status.busy": "2021-08-09T00:38:49.401883Z",
     "iopub.status.idle": "2021-08-09T00:38:49.404886Z",
     "shell.execute_reply": "2021-08-09T00:38:49.405346Z",
     "shell.execute_reply.started": "2021-08-09T00:36:31.566377Z"
    },
    "papermill": {
     "duration": 0.038782,
     "end_time": "2021-08-09T00:38:49.405521",
     "exception": false,
     "start_time": "2021-08-09T00:38:49.366739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#From these models, both Random Forest and Decision Trees are the most accurate with a 87.99% accuracy rate of prediction. It is likely that based off of PClass, Age, and Sex alone we could quite accurately predict the survival of a passenger on the Titanic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "80d34fed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-09T00:38:49.474476Z",
     "iopub.status.busy": "2021-08-09T00:38:49.473912Z",
     "iopub.status.idle": "2021-08-09T00:38:49.482876Z",
     "shell.execute_reply": "2021-08-09T00:38:49.482356Z",
     "shell.execute_reply.started": "2021-08-09T00:36:31.574100Z"
    },
    "papermill": {
     "duration": 0.044337,
     "end_time": "2021-08-09T00:38:49.483014",
     "exception": false,
     "start_time": "2021-08-09T00:38:49.438677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sub = pd.DataFrame({\n",
    "        \"PassengerId\": test[\"PassengerId\"],\n",
    "        \"Survived\": Y_pred\n",
    "    })\n",
    "sub.to_csv('mysurvival.csv',index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 16.728181,
   "end_time": "2021-08-09T00:38:50.225626",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-08-09T00:38:33.497445",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
